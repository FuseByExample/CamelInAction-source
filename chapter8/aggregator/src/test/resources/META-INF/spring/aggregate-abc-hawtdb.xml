<?xml version="1.0" encoding="UTF-8"?>
<!--
    Licensed to the Apache Software Foundation (ASF) under one or more
    contributor license agreements.  See the NOTICE file distributed with
    this work for additional information regarding copyright ownership.
    The ASF licenses this file to You under the Apache License, Version 2.0
    (the "License"); you may not use this file except in compliance with
    the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
-->

<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:camel="http://camel.apache.org/schema/spring"
       xsi:schemaLocation="
         http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
         http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd">

    <!-- this is our aggregation strategy defined as a spring bean -->
    <bean id="myAggregationStrategy" class="camelinaction.MyAggregationStrategy"/>

    <!-- define a persistent repository to be used by the aggregator -->
    <bean id="myRepo" class="org.apache.camel.component.hawtdb.HawtDBAggregationRepository">
        <!-- the repository must have an unique name -->
        <property name="repositoryName" value="myrepo"/>
        <!-- and we must tell which file to use as store -->
        <property name="persistentFileName" value="data/myrepo.dat"/>
    </bean>

    <camelContext xmlns="http://camel.apache.org/schema/spring">

        <route>
            <from uri="file://target/inbox"/>
            <!-- do a little logging when we load the file -->
            <log message="Consuming ${file:name}"/>
            <!-- aggregate using the aggregation strategy and complete when 3 messages
                 has been aggregated -->
            <aggregate strategyRef="myAggregationStrategy" completionSize="3"
                       aggregationRepositoryRef="myRepo">
                <!-- a correlation expression must be provided -->
                <correlationExpression>
                    <!-- aggregate all messages into the same group -->
                    <constant>true</constant>
                </correlationExpression>
                <!-- log the published outgoing message -->
                <log message="Sending out ${body}"/>
                <!-- and send it to a mock endpoint -->
                <to uri="mock:result"/>
            </aggregate>
        </route>

    </camelContext>

</beans>
